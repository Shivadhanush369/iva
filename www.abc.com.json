{"site":[{"@name":"https://www.abc.com","@host":"www.abc.com","@port":"443","@ssl":"true","alerts":[{"pluginid":"10098","alertRef":"10098","alert":"Cross-Domain Misconfiguration","name":"Cross-Domain Misconfiguration","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.</p>","instances":[{"uri":"https://www.abc.com/","method":"GET","param":"","attack":"","evidence":"access-control-allow-origin: *","otherinfo":"The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."},{"uri":"https://www.abc.com/robots.txt","method":"GET","param":"","attack":"","evidence":"access-control-allow-origin: *","otherinfo":"The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."},{"uri":"https://www.abc.com/sitemap.xml","method":"GET","param":"","attack":"","evidence":"access-control-allow-origin: *","otherinfo":"The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing."}],"count":"3","solution":"<p>Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).</p><p>Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</p>","otherinfo":"<p>The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.</p>","reference":"<p>https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy</p>","cweid":"264","wascid":"14","sourceid":"4"},{"pluginid":"10035","alertRef":"10035-1","alert":"Strict-Transport-Security Header Not Set","name":"Strict-Transport-Security Header Not Set","riskcode":"1","confidence":"3","riskdesc":"Low (High)","desc":"<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.</p>","instances":[{"uri":"https://www.abc.com/","method":"GET","param":"","attack":"","evidence":"","otherinfo":""},{"uri":"https://www.abc.com/robots.txt","method":"GET","param":"","attack":"","evidence":"","otherinfo":""},{"uri":"https://www.abc.com/sitemap.xml","method":"GET","param":"","attack":"","evidence":"","otherinfo":""}],"count":"3","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</p>","otherinfo":"","reference":"<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html</p><p>https://owasp.org/www-community/Security_Headers</p><p>https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security</p><p>https://caniuse.com/stricttransportsecurity</p><p>https://datatracker.ietf.org/doc/html/rfc6797</p>","cweid":"319","wascid":"15","sourceid":"4"},{"pluginid":"10050","alertRef":"10050-1","alert":"Retrieved from Cache","name":"Retrieved from Cache","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>","instances":[{"uri":"https://www.abc.com/","method":"GET","param":"","attack":"","evidence":"Hit from cloudfront","otherinfo":""}],"count":"1","solution":"<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>","otherinfo":"","reference":"<p>https://tools.ietf.org/html/rfc7234</p><p>https://tools.ietf.org/html/rfc7231</p><p>https://www.rfc-editor.org/rfc/rfc9110.html</p>","cweid":"-1","wascid":"-1","sourceid":"4"}]}]}