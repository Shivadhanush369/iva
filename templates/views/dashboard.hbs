<!DOCTYPE html>
<html>
<head>
  <title>ZAP Scan Dashboard</title>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="icon" href="avk.png">
  
  <style>

    /* chat bot css import start */
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
body {
  background-color: #bdc3c7;
  font-family: 'Poppins', sans-serif;
}
.chatbot__button {
  position: fixed;
  bottom: 35px;
  right: 40px;
  width: 50px;
  height: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #227ebb;
  color: #f3f7f8;
  border: none;
  border-radius: 50%;
  outline: none;
  cursor: pointer;
}
.chatbot__button span {
  position: absolute;
}
.show-chatbot .chatbot__button span:first-child,
.chatbot__button span:last-child {
  opacity: 0;
}
.show-chatbot .chatbot__button span:last-child {
  opacity: 1;
}
.chatbot {
  position: fixed;
 
  bottom: 100px;
  right: 40px;
  width: 420px;
  background-color: #f3f7f8;
  border-radius: 15px;
  box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1) 0 32px 64px -48px rgba(0, 0, 0, 0.5);
  transform: scale(0.5);
  transition: transform 0.3s ease;
  overflow: hidden;
  opacity: 0;
  pointer-events: none;
}
.show-chatbot .chatbot {
  opacity: 1;
  pointer-events: auto;
  transform: scale(1);
}
.chatbot__header {
  position: relative;
  background-color: #227ebb;
  text-align: center;
  padding: 16px 0;
}
.chatbot__header span {
  display: none;
  position: absolute;
  top: 50%;
  right: 20px;
  color: #202020;
  transform: translateY(-50%);
  cursor: pointer;
}
.chatbox__title {
  font-size: 1.4rem;
  color: #f3f7f8;
}
.chatbot__box {
  height: 400px;
  overflow-y: auto;
  padding: 30px 20px 100px;
}
.chatbot__chat {
  display: flex;
}
.chatbot__chat p {
  max-width: 75%;
  font-size: 0.95rem;
  white-space: pre-wrap;
  color: #202020;
  background-color: #019ef9;
  border-radius: 10px 10px 0 10px;
  padding: 12px 16px;
}
.chatbot__chat p.error {
  color: #721c24;
  background: #f8d7da;
}
.incoming p {
  color: #202020;
  background: #bdc3c7;
  border-radius: 10px 10px 10px 0;
}
.incoming span {
  width: 32px;
  height: 32px;
  line-height: 32px;
  color: #f3f7f8;
  background-color: #227ebb;
  border-radius: 4px;
  text-align: center;
  align-self: flex-end;
  margin: 0 10px 7px 0;
}
.outgoing {
  justify-content: flex-end;
  margin: 20px 0;
}
.incoming {
  margin: 20px 0;
}
.chatbot__input-box {
  position: absolute;
  bottom: 0;
  width: 100%;
  display: flex;
  gap: 5px;
  align-items: center;
  border-top: 1px solid #227ebb;
  background: #f3f7f8;
  padding: 5px 20px;
}
.chatbot__textarea {
  width: 100%;
  min-height: 55px;
  max-height: 180px;
  font-size: 0.95rem;
  padding: 16px 15px 16px 0;
  color: #202020;
  border: none;
  outline: none;
  resize: none;
  background: transparent;
}
.chatbot__textarea::placeholder {
  font-family: 'Poppins', sans-serif;
}
.chatbot__input-box span {
  font-size: 1.75rem;
  color: #202020;
  cursor: pointer;
  visibility: hidden;
}
.chatbot__textarea:valid ~ span {
  visibility: visible;
}

@media (max-width: 490px) {
  .chatbot {
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    border-radius: 0;
  }
  .chatbot__box {
    height: 90%;
  }
  .chatbot__header span {
    display: inline;
  }
}


    /* chat bot css import ends */
    body {
      font-family: 'Open Sans', sans-serif;
      font-weight: 300;
      line-height: 1.42em;
      color:#A7A1AE;
      background-color:#1F2739;
      margin: 0;
      padding: 0;
    }
    h1 {
      font-size:3em; 
      font-weight: 300;
      line-height:1em;
      text-align: center;
      color: #4DC3FA;
      margin-top: 20px;
    }
    .container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }
    
  
    .progress-bar-container {
      width: 100%;
      background-color: #f3f3f3;
      border: 1px solid #ccc;
      border-radius: 5px;
      overflow: hidden;
      margin: 10px 0;
    }
    .progress-bar {
      height: 20px;
      width: 0;
      background-color: #4caf50;
      text-align: center;
      line-height: 20px;
      color: white;
    }
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left-color: #4caf50;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
      margin: 10px auto;
      display: none;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .hidden {
      display: none;
    }
    #scanForm {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }
    #scanForm input {
      width: 300px;
      padding: 10px;
      margin-right: 10px;
    }
    #scanForm button {
      padding: 10px;
    }
    .error-message {
      color: red;
      margin-top: 10px;
    }


    .nav-icon {
            font-size: 30px;
            cursor: pointer;
            position: absolute; /* Position absolutely within the parent */
            top: 10px; /* Adjust top position as needed */
            left: 10px; /* Adjust left position as needed */
            z-index: 1000; /* Ensure it's above other content */
        }


        body {
    font-family: "Lato", sans-serif;
}

.sidenav {
    height: 100%;
    width: 0;
    position: fixed;
    z-index: 500;
    top: 0;
    left: 0;
    background-color: #111;
    overflow-x: hidden;
    transition: 0.5s;
    padding-top: 60px;
}

.sidenav a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    transition: 0.3s;
}

.sidenav a:hover {
    color: #f1f1f1;
}

.sidenav .closebtn {
    position: absolute;
    top: 0;
    right: 25px;
    font-size: 36px;
    margin-left: 50px;
}

@media screen and (max-height: 450px) {
    .sidenav {
        padding-top: 15px;
    }
    .sidenav a {
        font-size: 18px;
    }
}

.container {
    padding-left: 20px; /* Adjust as needed */
}

#openSidebarButton {
    position: absolute;
    top: 20px; /* Adjust as needed */
    left: 20px; /* Adjust as needed */
    font-size: 30px;
    cursor: pointer;
}



.container {
            max-width: 100%;
height:100%;
            padding: 20px;
        }

        /* Styles for the heading */
        
        /* Animation keyframes for subtle pulsating effect */
        @keyframes pulsate {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }

        .typewriter {
    display: flex;
    margin-top:10%;
    width: 50%;
    position: absolute;
         
    flex-direction: column;
    align-items: center;
     /* Adjust as needed */
}

.typewriter .line {
    overflow: hidden; /* Ensures the content is not revealed until the animation starts */
    white-space: nowrap; /* Keeps the text on a single line */
    margin: 10px 0; /* Space between lines */
    letter-spacing: .15em; /* Adjust as needed */
    border-right: .15em solid transparent; /* Initially invisible cursor */
}

.typewriter .line:nth-child(1) {
    animation: typing 4s steps(40, end) 0s 1 normal both, blink-caret .75s step-end infinite 4s;
}

.typewriter .line:nth-child(2) {
    animation: typing 4s steps(40, end) 4s 1 normal both, blink-caret .75s step-end infinite 8s;
}

.typewriter .line:nth-child(3) {
    animation: typing 4s steps(40, end) 8s 1 normal both, blink-caret .75s step-end infinite 12s;
}

.typewriter .line:nth-child(4) {
    animation: typing 4s steps(40, end) 12s 1 normal both, blink-caret .75s step-end infinite 16s;
}

/* The typing effect */
@keyframes typing {
    from { width: 0; }
    to { width: 100%; }
}

/* The cursor blink effect */
@keyframes blink-caret {
    from, to { border-color: transparent; }
    50% { border-color: orange; }
}





/* style for top dropdown */
  
select#scope {
            padding: 10px;
            border: 2px solid #007BFF;
            border-radius: 5px;
            background-color: #ffffff;
            color: #007BFF;
            font-size: 16px;
            transition: all 0.3s ease;
            cursor: pointer;
            appearance: none;
            outline: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        select#scope:hover {
            border-color: #0056b3;
            color: #0056b3;
        }
        select#scope:focus {
            border-color: #0056b3;
            box-shadow: 0 0 5px rgba(0, 91, 187, 0.5);
        }
        /* Custom arrow */
        select#scope::-ms-expand {
            display: none;
        }
        select#scope::after {
            content: '\25BC';
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            pointer-events: none;
            font-size: 12px;
            color: #007BFF;
        }
.right-align-container {
            display: flex;
            justify-content: flex-end;
            padding: 10px;
        }

        /* Styling for the select element */
        select {
            padding: 10px;
            font-size: 16px;
            border: 2px solid #007BFF;
            border-radius: 5px;
            background-color: #fff;
            color: #007BFF;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            outline: none;
        }

        select:hover {
            border-color: #0056b3;
            color: #0056b3;
        }

        select:focus {
            border-color: #0056b3;
            box-shadow: 0 0 5px rgba(0, 91, 187, 0.5);
        }

        
/* style for bottom dropdown end */
  </style>
</head>
<body>
   {{>navbar}}
<div class="right-align-container">
    <select id="scope" onchange="toggleCustomInput()">
                    <option value="" disabled selected>Select your scope</option>
                    
                </select>
                </div>

  <div class="container">
   
{{>bodycards}}

  

  {{!-- <form id="scanForm">
    <!-- <input type="text" id="targetUrl" placeholder="Enter target URL" required>
    <button type="submit">Start Scan</button> -->
  </form>
  <div class="typewriter">
    <div class="line">Welcome to my dashboard, this is a ZAP Scan Dashboard.</div>
    <div class="line">It provides comprehensive security scan results.</div>
    <div class="line">Review your scan history and detailed reports.</div>
    <div class="line">Stay secure and updated with our real-time analysis.</div>
</div> --}}
  <div class="container" id="statusContainer">
    
  </div>
  <div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <a href="history.html">History</a>

  </div>
  <script>
    const socket = io();
    let componentId = 1;


    
    // Add event listener to the form
//     document.getElementById('scanForm').addEventListener('submit', async (event) => {
//         event.preventDefault();
//         const targetUrl = document.getElementById('targetUrl').value;
//         addStatusComponent(targetUrl + componentId);

//         try {
//             const response = await fetch(`/data/${encodeURIComponent(targetUrl)}`);
// alert()
//             if (!response.ok) {
//                 const errorData = await response.json();
//                 console.log('Error message:', errorData.message);
//                 updateStatusComponent(targetUrl + componentId, 'dateLimit', errorData.message);
//                 return;
//             }

//             const data = await response.json();
//             console.log('Fetched data:', data); // Handle fetched data as needed
//         } catch (error) {
//             console.error('Error fetching data:', error);
//         }

//        //socket.emit('startScan', targetUrl);
//     });



socket.on('hideTypewriter', () => {
      // Hide the typewriter div
      document.querySelector('.typewriter').style.display = 'none';
    });




    socket.on('checkTime', async (targetUrl) => {
      addStatusComponent(targetUrl + componentId);
    try {
     
        const response = await fetch(`/data/${encodeURIComponent(targetUrl)}`);

        if (!response.ok) {
            const errorData = await response.json();
            console.log('Error message:', errorData.message);
            updateStatusComponent(targetUrl + componentId, 'dateLimit', errorData.message);
            return;
        }

        const data = await response.json();
        console.log('Fetched data:', data); // Handle fetched data as needed
        // You can update the UI or take other actions based on 'data' here
    } catch (error) {
        console.error('Error fetching data:', error);
    }

    // You can emit another socket event or perform other actions here
    socket.emit('startScan', targetUrl);
});



    // Listen for events
    socket.on('startScan', (targetUrl) => {

        addStatusComponent(targetUrl + componentId);
        
    });

    socket.on('spiderStatus', (data) => {
        const { url, status } = data;
        updateStatusComponent(url + componentId, 'spider', status);
    });

    socket.on('scanStatus', (data) => {
        const { url, status } = data;
        updateStatusComponent(url + componentId, 'scan', status);
    });

    socket.on('scanComplete', (data) => {
        const { url } = data;
        showSpinner(url + componentId);
    });

    socket.on('generatedjson', (data) => {
        const { url } = data;
        hideSpinner(url + componentId);
        const reportStatus = document.getElementById(`reportStatus-${encodeURIComponent(url + componentId)}`);
        reportStatus.innerHTML = "Report Generated";
        componentId = componentId+1;
    });

    socket.on('error', (data) => {
        const { url, message } = data;
        updateStatusComponent(url + componentId, 'error', message);
        hideSpinner(url + componentId);
    });

    function addStatusComponent(url) {
    const typew =document.getElementsByClassName("typewriter");
    typew.innerHTML = " ";
        const statusContainer = document.getElementById('statusContainer');
        const encodedUrl = encodeURIComponent(url);
        const card = document.createElement('div');
        card.className = 'card';
        card.id = `status-${encodedUrl}`;
        card.innerHTML = `
            <h2>${url.slice(0, -1)}</h2>
            <div>
                <h3>Spider Status</h3>
                <div class="progress-bar-container">
                    <div id="spiderProgressBar-${encodedUrl}" class="progress-bar">0%</div>
                </div>
            </div>
            <div>
                <h3>Scan Status</h3>
                <div class="progress-bar-container">
                    <div id="scanProgressBar-${encodedUrl}" class="progress-bar">0%</div>
                </div>
            </div>
            <div id="spinner-${encodedUrl}" class="spinner hidden"></div>
            <div id="reportStatus-${encodedUrl}"></div>
            <div id="error-${encodedUrl}" class="error-message"></div>
        `;
        statusContainer.appendChild(card);
    }

    function updateStatusComponent(url, type, status) {
        const encodedUrl = encodeURIComponent(url);
        if (type == 'dateLimit') {
            componentId =componentId+ 1;

            const card = document.getElementById(`status-${encodedUrl}`);
            card.innerHTML = '';

            const site = document.createElement('div');
            site.innerHTML = url.slice(0, -1);

            card.appendChild(site);

            const description = document.createElement('div');
            description.innerHTML = "<p>This website has already been scanned</p>";
            card.appendChild(description);
        }

        if (type === 'error') {
            document.getElementById(`error-${encodedUrl}`).innerText = `Error: ${status}`;
        } else {
            const progressBar = document.getElementById(`${type}ProgressBar-${encodedUrl}`);
            if (progressBar) {
                progressBar.style.width = `${status}%`;
                progressBar.innerText = `${status}%`;
            }
        }
    }

    function showSpinner(url) {
        const encodedUrl = encodeURIComponent(url);
        const spinner = document.getElementById(`spinner-${encodedUrl}`);
        spinner.style.display = 'block';
    }

    function hideSpinner(url) {
        const encodedUrl = encodeURIComponent(url);
        const spinner = document.getElementById(`spinner-${encodedUrl}`);
        spinner.style.display = 'none';
    }
</script>

<span  class="nav-icon" style="font-size:30px;cursor:pointer" onclick="openNav()">&#9776; </span>

<script>
function openNav() {
  document.getElementById("mySidenav").style.width = "200px";
}

function closeNav() {
  document.getElementById("mySidenav").style.width = "0";
}

</script>
<link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0"
    />
<!-- Code :) -->
   <button class="chatbot__button">
      <span class="material-symbols-outlined">mode_comment</span>
      <span class="material-symbols-outlined">close</span>
    </button>
    <div class="chatbot">
      <div class="chatbot__header">
        <h3 class="chatbox__title">IVA chatbot</h3>
        <span class="material-symbols-outlined">close</span>
      </div>
      <ul class="chatbot__box">
        <li class="chatbot__chat incoming">
          <span class="material-symbols-outlined">smart_toy</span>
          <p>Hi there. How can I help you today?</p>
        </li>
        <li class="chatbot__chat outgoing">
          <p>...</p>
        </li>
      </ul>
      <div class="chatbot__input-box">
        <textarea
          class="chatbot__textarea"
          placeholder="Enter a message..."
          required
        ></textarea>
        <span id="send-btn" class="material-symbols-outlined">send</span>
      </div>
    </div>
    <!-- chat bot script start -->
<script>

const chatbotToggle = document.querySelector('.chatbot__button');
const sendChatBtn = document.querySelector('.chatbot__input-box span');
const chatInput = document.querySelector('.chatbot__textarea');
const chatBox = document.querySelector('.chatbot__box');
const chatbotCloseBtn = document.querySelector('.chatbot__header span');

let userMessage;
// Need GPT key
const inputInitHeight = chatInput.scrollHeight;
const API_KEY = 'HERE';

const createChatLi = (message, className) => {
  const chatLi = document.createElement('li');
  chatLi.classList.add('chatbot__chat', className);
  let chatContent =
    className === 'outgoing'
      ? `<p></p>`
      : `<span class="material-symbols-outlined">smart_toy</span> <p></p>`;
  chatLi.innerHTML = chatContent;
  chatLi.querySelector('p').textContent = message;
  return chatLi;
};

const generateResponse = (incomingChatLi) => {
  const API_URL = 'https://api.openai.com/v1/chat/completions';
  const messageElement = incomingChatLi.querySelector('p');

  const requestOptions = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      message: [{ role: 'user', content: userMessage }],
    }),
  };
  fetch(API_URL, requestOptions)
    .then((res) => res.json())
    .then((data) => {
      console.log(data);
      messageElement.textContent = data.choices[0].message.content;
    })
    .catch((error) => {
      messageElement.classList.add('error');
      messageElement.textContent = 'Oops! Please try again!';
      console.log(error);
    })
    .finally(() => chatBox.scrollTo(0, chatBox.scrollHeight));
};

const handleChat = () => {
  userMessage = chatInput.value.trim();
  if (!userMessage) return;
  chatInput.value = '';
  chatInput.style.height = `${inputInitHeight}px`;

  chatBox.appendChild(createChatLi(userMessage, 'outgoing'));
  chatBox.scrollTo(0, chatBox.scrollHeight);

  setTimeout(() => {
    const incomingChatLi = createChatLi('Thinking...', 'incoming');
    chatBox.appendChild(incomingChatLi);
    chatBox.scrollTo(0, chatBox.scrollHeight);
    generateResponse(incomingChatLi);
  }, 600);
};

chatInput.addEventListener('input', () => {
  chatInput.style.height = `${inputInitHeight}px`;
  chatInput.style.height = `${chatInput.scrollHeight}px`;
});
chatInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && !e.shiftKey && window.innerWidth > 800) {
    e.preventDefault();
    handleChat();
  }
});
chatbotToggle.addEventListener('click', () =>
  document.body.classList.toggle('show-chatbot')
);
chatbotCloseBtn.addEventListener('click', () =>
  document.body.classList.remove('show-chatbot')
);
sendChatBtn.addEventListener('click', handleChat);



</script>
<!-- chatbot script ends -->
<script>

document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('jwtToken');
    const username = localStorage.getItem('username');
    
    if (!token || !username) {
        window.location.href = '/'; // Redirect to your login page
    }
});

</script>
<script src="dashboard.js"></script>
</body>
</html>