
      <main>
<div class="notification">
       
     </div>

<div id="popup" class="popup hidden">
    <div class="popup-content">
     <div class="tabs">
    <!-- Radio buttons for tab switching -->
    <input type="radio" name="tab" id="tab1" checked>
    <input type="radio" name="tab" id="tab2">

    <!-- Tab navigation -->
    <div class="tab-titles">
      <div class="jira-image">
        <label for="tab1" class="tab-title">
          <img src="../jira.png" alt="Jira">
        </label>
      </div>
      <div>
        <label for="tab2" class="tab-title">
          <img src="../otrs4.png" alt="OTRS">
        </label>
      </div>
    </div>

    <!-- Tab content -->
    <div class="tab-content">
      <div class="content" id="content1">
        <div class="popup-header">
            IVA 
            <span>(Bug, Story, Task, Epic)</span>
        </div>
        <div class="form-element">
        <div class="form-group">
             <label for="description">ScanId</label>
            <select id="ticketscanid" >
                    <option value="" disabled selected>Select your scope</option>
   </select>
                      <label for="summary">Url </label>
            <select id="ticketscope" >
                    <option value="" disabled selected>Select your scope</option>
                    
                </select>
                 <label for="summary">vulnerability</label>
<div class="dropdown-container">
            <select id="vulnerabilityscope" class="form-control" onchange="setTicketSummary()">
                    <option value="" disabled selected>Select your scope</option>
                    
                </select>
       </div>
        </div>
        
        <div class="form-group">
                 <label for="summary">Summary</label>
            <input type="text" class="summary" id="summary" placeholder="Enter task summary"readonly>
            
            <label for="summary">Assignee</label>
            <select type="text" id="asign" placeholder="select Assignee"></select>
            <label for="description">Description</label>
            <textarea id="description" placeholder="Describe the task"></textarea>
        </div>

        <div class="form-group">
            <label for="type">Type</label>
            <select id="type">
                <option value="10002">Bug</option>
                <option value="10003">Story</option>
                <option value="10001">Task</option>
                <option value="10004">Epic</option>
            </select>
        </div>

        <div class="popup-buttons">
            {{!-- <button class="btn-close" onclick="ticketpopclose()">Close</button> --}}
            <button class="ticket-submit" onclick="ticketsubmit()">Submit</button>
        </div>
 </div>
        <div class="popup-footer">
            Project: IVA - Powered by Team
       
        </div>
      </div>
      <div class="content" id="content2">
        <h2>This feature is under development. Please check back soon.</h2>
        
      </div>
    </div>
  </div>



                <button id="closePopup" class="close-btn">Close</button>
    </div>
</div>










           <h1>IVA Spectrum</h1>
        

        
   
            <div class="compareScanPopUp" id="comparePopUp">
        <button class="close-btn-compare-popup" onclick="closePopup()">X</button>
        <div class="report" id="report1">
            <h2>Scan Report 1</h2>
            <p><strong>Username:</strong> avekshaa</p>
            <p><strong>URL:</strong> <a href="https://www.abc.com/" target="_blank">https://www.abc.com/</a></p>
            <p><strong>Date:</strong> 2024-08-01T07:32:38.591Z</p>
            <p><strong>Scan Profile:</strong> FullScan</p>
            <p><strong>Status:</strong> Completed</p>
            <p><strong>Medium Alerts:</strong></p>
            <ul class="alerts-list" id="medium-alerts-report1">
                <!-- Medium alert names will be inserted here -->
            </ul>
        </div>
        <div class="report" id="report2">
            <h2>Scan Report 2</h2>
            <p><strong>Username:</strong> avekshaa</p>
            <p><strong>URL:</strong> <a href="https://www.abc.com/" target="_blank">https://www.abc.com/</a></p>
            <p><strong>Date:</strong> 2024-08-01T07:32:38.591Z</p>
            <p><strong>Scan Profile:</strong> FullScan</p>
            <p><strong>Status:</strong> Completed</p>
            <p><strong>Medium Alerts:</strong></p>
            <ul class="alerts-list" id="medium-alerts-report2">
                <!-- Medium alert names will be inserted here -->
            </ul>
        </div>
    </div>
           <div id="modal" class="modal-overlay">
    <div class="modal-content">
        <div class="modle-body">
         <div class="card card-left">
            <div class="card-header">Issues</div>
            <!-- Dynamic content will be inserted here -->
        </div>
        <div class="card card-right">
            <div class="card-header">Issue Details</div>
            <p>Select an issue from the left to see details here.</p>
            <!-- Details will be inserted here dynamically -->
            
        </div>
        </div>
        <span class="close-button" onclick="closeModal()">Ã—</span>
    </div>
    
</div>

<div class="scopesection">
           {{!-- <div class="date">
             <input type="date" >
             
           </div> --}}
                <div class="right-align-container">
                  <select id="scope" onchange="toggleCustomInput()">
                    <option value="" disabled selected>Select your scope</option>
                    
                </select>
                
                </div>
</div>

       <!-- end insights -->
         
      <div class="recent_order">
        {{!-- <button class="false-positive"> confirm False Positive</button> --}}
         <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                {{!-- <button class="btn btn-primary mr-2">New Scan</button>
                <button class="btn btn-secondary mr-2">Stop Scans</button>
                <button class="btn btn-danger mr-2">Delete Scans</button>
                <button class="btn btn-warning mr-2">Generate Report</button>
                <button id="comparebutton"class="btn btn-info mr-2">Compare Scans</button>
                <button class="btn btn-success">Export to</button> --}}
            </div>
            <div >
              <div class="table-wrapper">
         <table class="table table-hover">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Check</th>
                    <th scope="col">ScanId</th>
                    <th scope="col">Target</th>
                    <th scope="col">Risk</th>
                    <th scope="col">Vulnerability</th>
                    <th scope="col">False positive</th>
                    <th scope="col">Ticket</th>
                    
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>no data to show</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>
                      no data to show 
                    </td>
                    <td><span class="badge badge-warning">no data</span></td>
                    <td><span class="badge badge-warning">no data</span></td>
                </tr>
                  <tr>
                    <td>no data to show</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>
                      no data to show 
                    </td>
                    <td><span class="badge badge-warning">no data</span></td>
                    <td><span class="badge badge-warning">no data</span></td>
                </tr>
                   <tr>
                    <td>no data to show</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>no data</td>
                    <td>
                      no data to show 
                    </td>
                    <td><span class="badge badge-warning">no data</span></td>
                    <td><span class="badge badge-warning">no data</span></td>
                </tr>
            </tbody>
        </table>
        </div>
         <a href="#">Show All</a>
         
  {{!-- <h2>Vulnerability Analysis - Quadrant View</h2>
    <div id="containerFetch"></div> <!-- Chart Container -->
    <h2>Trend Analysis</h2>
    <div id="containerVuln" style="height: 400px; margin-top: 20px;"></div>
    --}}
    {{!-- <div class="card">
            <h2>Vulnerability Analysis - Quadrant View</h2>
            <div id="containerFetch"></div> <!-- Chart Container -->
        </div>
        <div class="card">
            <h2>Trend Analysis</h2>
            <div id="containerVuln"></div> <!-- Chart Container -->
        </div>
    </div> --}}

        <button class="false-positive"> confirm False Positive</button>

<br><br>



      </div>

  

      </main>

      <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    

          <!-- Include Highcharts and Highcharts-more for bubble charts -->
      <script src="https://code.highcharts.com/highcharts.js"></script>
      <script src="https://code.highcharts.com/highcharts-more.js"></script> 

    <script>
    // since this were shifted to newscript.js im commenting this , their table data is populated based on scope
/*
function populateTable(scan) {
   
   
        const tbody = document.querySelector('table tbody');
        tbody.innerHTML = ''; // Clear any existing rows

        scan.forEach(scan => {
            const row = document.createElement('tr');
            
            row.innerHTML = `
            <td><input type="checkbox" value="${scan.scanid}"/> ${scan.scanid}</td>
                <td> <a href="${scan.url}">${scan.url}</a></td>
                <td>${scan.username}</td>
                <td>${scan.scan_profile}</td>
                <td>${scan.date}</td>
                <td>
                    <span class="badge badge-danger">${scan.vulnerability.High}</span>
                    <span class="badge badge-warning">${scan.vulnerability.Medium}</span>
                    <span class="badge badge-secondary">${scan.vulnerability.Low}</span>
                    
                </td>    
            `;

            tbody.appendChild(row);

             const highBadge = row.querySelector('.badge-danger');
        const mediumBadge = row.querySelector('.badge-warning');
        const lowBadge = row.querySelector('.badge-secondary');

        highBadge.addEventListener('click', () => handleBadgeClick(scan.filteredAlerts.high));
        mediumBadge.addEventListener('click', () => handleBadgeClick(scan.filteredAlerts.medium));
        lowBadge.addEventListener('click', () => handleBadgeClick(scan.filteredAlerts.low));
        });

    }*/
    
    // since this were shifted to newscript.js im commenting this , their table data is populated based on scope
  /*  async function fetchData() {
            try {
                const token = localStorage.getItem('jwtToken');

                // Set up fetch request with headers
                const response = await fetch('/history', {
                    method: 'POST', // specify the HTTP method
                    headers: {
                        'Authorization': `Bearer ${token}`, // include the retrieved token in the Authorization header
                        'Content-Type': 'application/json' // adjust content type if necessary
                        // add more headers as needed
                    }
                });

                // Handle the response
                if (response.ok) {
                    const data = await response.json(); // or response.text() depending on the response content
                    populateTable(data);
                }
            }  catch (error) {
                console.error('Error fetching data:', error);
            }
        }
        fetchData(); */



function handleBadgeClick(alertData, riskLevel) {
    const leftCard = document.querySelector('.card-left');
    const rightCard = document.querySelector('.card-right');

    // Set the title based on the risk level
    let issueTitle = '';
    if (riskLevel === 'high') {
        issueTitle = 'High Issues';
    } else if (riskLevel === 'medium') {
        issueTitle = 'Medium Issues';
    } else if (riskLevel === 'low') {
        issueTitle = 'Low Issues';
    }

    // Update the left card's title based on risk level
    leftCard.innerHTML = `<div class="card-header">${issueTitle}</div>`;

    // Create and append issue names to the left card
    alertData.forEach((alert) => {
        const alertElement = document.createElement('div');
        alertElement.className = 'name';
        alertElement.textContent = alert.name;
        alertElement.addEventListener('click', () => displayDetails(alert));
        leftCard.appendChild(alertElement);
    });





// Function to display alert details on the right card
function displayDetails(selectedAlert) {
    const cweLink = selectedAlert.cweid 
        ? ` ${selectedAlert.cweid} &nbsp;&nbsp;<a href="https://cwe.mitre.org/data/definitions/${selectedAlert.cweid}.html" target="_blank" class="cwe-link">click here</a>`
        : 'N/A'; // Check if CWE ID exists and generate the link, otherwise show 'N/A'

 const wascLink = selectedAlert.wascid 
        ? ` ${selectedAlert.wascid}&nbsp;&nbsp;&nbsp;<a href="http://projects.webappsec.org/w/page/13246974/Threat%20Classification%20Reference%20Grid" target="_blank" class="wasc-link">click here</a>`
        : 'N/A'; // Check if WASC ID exists and generate the link, otherwise show 'N/A'
    rightCard.innerHTML = `
    <div class="details-section">
        <h2>Issue Details</h2>
        <p><strong>Url:</strong> ${selectedAlert.url}</p>
        <p><strong>Alert Name:</strong> ${selectedAlert.name}</p>
        <p><strong>Description:</strong> ${selectedAlert.description}</p>
        <p><strong>Risk Description:</strong> ${selectedAlert.risk}</p>
        <p><strong>Solution:</strong> ${selectedAlert.solution}</p>
        <p><strong>CWE ID:</strong> ${cweLink}</p>  <!-- CWE ID with "click here" hyperlink -->
        <p><strong>WASC ID:</strong> ${wascLink}</p>
    </div>
    `;
}


    const modal = document.getElementById('modal');
   // const modalMessage = document.getElementById('modal-message');
    const body = document.querySelector('body');
    
    // Apply blur effect to the body
    body.classList.add('blur');
    
    // Show the modal with the corresponding risk level
   // modalMessage.textContent = riskLevel;
    modal.style.display = 'flex';
}

function getRiskClass(risk) {
    switch (risk) {
        case 'High':
            return 'risk-high';
        case 'Medium':
            return 'risk-medium';
        case 'Low':
            return 'risk-low';
        case 'Informational':
            return 'risk-info';
        default:
            return '';
    }
}
function closeModal() {
    const modal = document.getElementById('modal');
    const body = document.querySelector('body');
    const cards =document.getElementsByClassName('card-header');
   const rightCard = document.querySelector('.card-right');
    rightCard.innerHTML=`<div class="card-header">Issue Details</div>
            <p>Select an issue from the left to see details here.</p>`;
    cards.innerHTML=' ';
    
    // Remove blur effect from the body
    body.classList.remove('blur');
    
    // Hide the modal
    modal.style.display = 'none';
}

// Attach event listeners to the modal close button
document.querySelector('#modal button').addEventListener('click', closeModal);



    // Get all checkboxes
    const checkboxes = document.querySelectorAll('table tbody input[type="checkbox"]');
    
    // Filter and count the checked checkboxes, and collect their values
    const checkedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
    const checkedCount = checkedCheckboxes.length;
    const checkedValues = checkedCheckboxes.map(checkbox => checkbox.value).join(', ');

/* make an api call to get data of scan id and populate in compare scans */


    // Show alert with count and values
    if (checkedCount === 2) {
        alert(`Yes\nChecked Count: ${checkedCount}\nValues: ${checkedValues}`);
    } else {
        alert(`No\nChecked Count: ${checkedCount}\nValues: ${checkedValues}`);
    }
});
//////////////////////////////////////////////////

















    </script>
<style>

     button.test-btn {
    margin-left: 10px;
    padding: 1rem;
    background-color: #f39c12;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  button.test-btn:hover {
    background-color: #d68910;
  }

  /* Align Submit and Test Connection Buttons */
  .form-actions {
    display: flex;
    justify-content: space-between;
    gap: 10px;
  }

  .status-message {
    margin-top: 10px;
    font-size: 0.9rem;
    text-align: center;
    color: #333;
  }

  /* Form styling */
  .form-container {
    background-color: #fff;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 100%;
  }

  h2 {
    text-align: center;
    margin-bottom: 1rem;
    color: #2c3e50;
  }

  .form-row {
    display: flex;
    gap: 1rem;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }

  .form-group {
    flex: 1; /* Allows the form groups to share space evenly */
  }

  label {
    display: block;
    font-size: 0.9rem;
    color: #555;
    margin-bottom: 0.5rem;
  }

  input {
    width: 100%; /* Makes the input take up all available space */
    padding: 0.8rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    outline: none;
    transition: border-color 0.3s;
  }

  input:focus {
    border-color: #3498db;
  }

  button.submit-btn {
    width: 50%;
    padding: 1rem;
    background-color: #3498db;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  button.submit-btn:hover {
    background-color: #2980b9;
  }

  /* Style for the tabs container */
  .tabs {
    display: flex;
    flex-direction: column;
    width: 100%;
    margin: 0 auto;
  }

  .tab-titles {
    display: flex;
    gap: 10px;
    cursor: pointer;
    background-color: #f0f0f0;
    padding: 10px;
  }

  .tab-title {
    padding: 10px;
    font-size: 16px;
    text-align: center;
    background-color: #ddd;
    border-radius: 5px;
    transition: background-color 0.3s;
  }

  .tab-title:hover {
    background-color: #ccc;
  }

  img {
   height: 44px;
  width: 109px;
  }

  .tab-content {
    padding: 20px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-top: 10px;
    display: flex;
    justify-content: space-around;
    box-sizing: border-box;
  }

  .content {
    display: none;
    width: 100%;
  }

  /* Hide radio buttons */
  input[type="radio"] {
    display: none;
  }

  /* Show content for the selected tab */
  input#tab1:checked ~ .tab-content #content1,
  input#tab2:checked ~ .tab-content #content2 {
    display: block;
  }

  /* Active tab style */
  input#tab1:checked ~ .tab-titles label[for="tab1"],
  input#tab2:checked ~ .tab-titles label[for="tab2"] {
    background-color: #10bbbb;
    color: white;
  }

  input#tab1:checked ~ .tab-titles label[for="tab1"]:hover,
  input#tab2:checked ~ .tab-titles label[for="tab2"]:hover {
    background-color: #10bbbb;
  }




/*ticket popup css */ 

/* Popup Container */
/* Form group container */
.form-group {
    display: flex; /* Use flexbox for horizontal alignment */
    gap: 20px; /* Space between label-select pairs */
    align-items: center; /* Vertically align items */
}

/* Styling for label and select pairs */
.form-group label {
    font-size: 1rem;
    color: #333;
    font-weight: 600;
    white-space: nowrap; /* Prevent text from wrapping */
}

.form-group select {
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
}
.summary {
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
}

/* Add spacing between labels and selects */
.form-group label + select {
    margin-left: 10px;
}

/* Hover and focus effects for select */
.form-group select:hover {
    border-color: #007bff;
}

.form-group select:focus {
    border-color: #007bff;
    outline: none;
}

/* Responsive design for smaller screens */
@media (max-width: 768px) {
    .form-group {
        flex-direction: column; /* Stack items vertically */
        gap: 10px; /* Reduce gap */
    }

    .form-group label + select {
        margin-left: 0; /* Remove horizontal margin */
    }
}



button {
    padding: 10px 20px;
    font-size: 16px;
    border: none;
    background-color: #4CAF50;
    color: white;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
}

button:hover {
    background-color: #45a049;
}

/* Ensure the popup content container is relative for absolute positioning */
.popup-content {
    position: relative; /* Ensures button is positioned relative to this container */
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width:960px;
}


/* Close button */
.close-btn {
    background-color: #f44336;  /* Red color for button */
    color: white;               /* White text */
    font-size: 16px;            /* Font size */
    border: none;               /* No border */
    border-radius: 11%;         /* Circular button */
    padding: 10px 16px;              /* Padding inside the button */
    position: absolute;         /* Position it inside the popup */
    top: 10px;                  /* Place it 10px from the top */
    right: 30px;                /* Move it 20px from the right (adjusted) */
    cursor: pointer;           /* Pointer cursor on hover */
    transition: background-color 0.3s;  /* Smooth transition for hover */
    z-index: 10;                /* Ensure the button is on top of other content */
}


#vulnerabilityscope{
    width:30%;
}

.false-positive{
    left-margin:150px;
}


/* Wrapper for the table */
.table-wrapper {
    max-height: 300px;  /* Set a fixed height for the table body */
    overflow-y: auto;   /* Enable vertical scrolling when content overflows */
}





</style>
