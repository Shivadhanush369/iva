// document.addEventListener('DOMContentLoaded', async () => {
//     const token = localStorage.getItem('jwtToken'); // Retrieve the token from local storage

//     try {
//         // Fetch scopes or URLs with authorization header
//         const response = await fetch('/scopes', {
//             method: 'GET',
//             headers: {
//                 'Authorization': `Bearer ${token}`,
//                 'Content-Type': 'application/json'
//             }
//         });

//         if (!response.ok) {
//             throw new Error('Network response was not ok');
//         }

//         const data = await response.json();
//         const urlSelect = document.getElementById('urlSelect');

//         data.forEach(scope => {
//             const option = document.createElement('option');
//             option.value = scope.url; // Assuming scope contains url field
//             option.text = scope.name; // Assuming scope contains name field
//             urlSelect.appendChild(option);
//         });

//         // Add event listener for the dropdown change
//         urlSelect.addEventListener('change', fetchVulnerabilityData);

//     } catch (error) {
//         console.error('Error fetching scopes:', error);
//     }
// });

// async function fetchVulnerabilityData() {
//     const urlSelect = document.getElementById('urlSelect');
//     const url = urlSelect.value;

//     const token = localStorage.getItem('jwtToken'); // Retrieve the token from local storage

//     try {
//         const response = await fetch('/api/vulnerability-data', {
//             method: 'POST',
//             headers: {
//                 'Authorization': `Bearer ${token}`,
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({ url }) // Send the selected URL in the request body
//         });

//         if (!response.ok) {
//             throw new Error('Network response was not ok');
//         }

//         const data = await response.json();
//         console.log('Fetched vulnerability data:', data); // Log fetched data for debugging

//         // Prepare data for Highcharts
//         const processedData = data.map(item => [parseInt(item.riskCode), parseInt(item.confidence)]);
//         console.log('Processed data for chart:', processedData); // Log processed data for debugging

//         // Create the Highcharts chart
//         Highcharts.chart('container', {
//             chart: {
//                 type: 'scatter',
//                 zoomType: 'xy'
//             },
//             title: {
//                 text: 'Vulnerability Score vs Probability'
//             },
//             xAxis: {
//                 title: {
//                     text: 'Vulnerability Score (Risk Code)'
//                 },
//                 min: 0,
//                 max: 2,
//                 tickInterval: 1,
//                 categories: ['Informational', 'Low', 'Medium'] // Adjust labels based on your risk code definitions
//             },
//             yAxis: {
//                 title: {
//                     text: 'Probability (Confidence Level)'
//                 },
//                 min: 0,
//                 max: 3,
//                 tickInterval: 1
//             },
//             series: [{
//                 name: 'Vulnerabilities',
//                 data: processedData,
//                 marker: {
//                     radius: 5,
//                     symbol: 'circle'
//                 }
//             }]
//         });
//     } catch (error) {
//         console.error('Error fetching vulnerability data:', error);
//     }
// }



// above one will automatically toggleanalytics, no need to click the fetch button in UI

// below one will not automatically toggleanalytics, you need to click the fetch button in UI


document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('jwtToken'); // Retrieve the token from local storage

    try {
        // Fetch scopes or URLs with authorization header
        const response = await fetch('/scopes', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        const urlSelect = document.getElementById('urlSelect');

        data.forEach(scope => {
            const option = document.createElement('option');
            option.value = scope.url; // Assuming scope contains url field
            option.text = scope.name; // Assuming scope contains name field
            urlSelect.appendChild(option);
        });

    } catch (error) {
        console.error('Error fetching scopes:', error);
    }
});

async function fetchVulnerabilityData() {
    const urlSelect = document.getElementById('urlSelect');
    const url = urlSelect.value;

    const token = localStorage.getItem('jwtToken'); // Retrieve the token from local storage

    try {
        const response = await fetch('/api/vulnerability-data', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url }) // Send the selected URL in the request body
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();
        console.log('Fetched vulnerability data:', data); // Log fetched data for debugging

        // Prepare data for Highcharts
        const processedData = data.map(item => [parseInt(item.riskCode), parseInt(item.confidence)]);
        console.log('Processed data for chart:', processedData); // Log processed data for debugging

        // Create the Highcharts chart
        Highcharts.chart('container', {
            chart: {
                type: 'scatter',
                zoomType: 'xy'
            },
            title: {
                text: 'Vulnerability Score vs Probability'
            },
            xAxis: {
                title: {
                    text: 'Vulnerability Score (Risk Code)'
                },
                min: 0,
                max: 2,
                tickInterval: 1,
                categories: ['Informational', 'Low', 'Medium'] // Adjust labels based on your risk code definitions
            },
            yAxis: {
                title: {
                    text: 'Probability (Confidence Level)'
                },
                min: 0,
                max: 3,
                tickInterval: 1
            },
            series: [{
                name: 'Vulnerabilities',
                data: processedData,
                marker: {
                    radius: 5,
                    symbol: 'circle'
                }
            }]
        });
    } catch (error) {
        console.error('Error fetching vulnerability data:', error);
    }
}

// Attach event listener to the button
document.getElementById('fetchDataBtn').addEventListener('click', fetchVulnerabilityData);

